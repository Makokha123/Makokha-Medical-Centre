
"""Add to payroll_payments paid_by column

Revision ID: 26732c22af98
Revises: 2a39b7cae309
Create Date: 2025-10-06 12:05:36.538956

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '26732c22af98'
down_revision = '2a39b7cae309'
branch_labels = None
depends_on = None


def upgrade():
    # Make this migration idempotent and safe across SQLite and other DBs.
    bind = op.get_bind()
    dialect_name = bind.dialect.name

    if dialect_name == 'sqlite':
        # Check existing columns via PRAGMA and add only missing ones
        # If a previous failed attempt left a temporary table behind, remove it
        try:
            bind.execute(sa.text("DROP TABLE IF EXISTS _alembic_tmp_payroll_payments"))
        except Exception:
            pass

        res = bind.execute(sa.text("PRAGMA table_info('payroll_payments')")).fetchall()
        cols = [r[1] for r in res]
        with op.batch_alter_table('payroll_payments', schema=None) as batch_op:
            if 'paid_by' not in cols:
                batch_op.add_column(sa.Column('paid_by', sa.Integer(), nullable=True))
            if 'payment_date' not in cols:
                batch_op.add_column(sa.Column('payment_date', sa.DateTime(), nullable=True))
            if 'notes' not in cols:
                batch_op.add_column(sa.Column('notes', sa.Text(), nullable=True))
            # do NOT drop existing columns in SQLite here
    else:
        # For other DBs, use batch_alter_table to add columns if they don't exist
        # (Some DBs will error if column exists; this is typically run once)
        with op.batch_alter_table('payroll_payments', schema=None) as batch_op:
            try:
                batch_op.add_column(sa.Column('paid_by', sa.Integer(), nullable=True))
            except Exception:
                pass
            try:
                batch_op.add_column(sa.Column('payment_date', sa.DateTime(), nullable=True))
            except Exception:
                pass
            try:
                batch_op.add_column(sa.Column('notes', sa.Text(), nullable=True))
            except Exception:
                pass

    # end safe alter


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('payroll_payments', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.DATETIME(), nullable=True))
        # REMOVED: Constraint operations that are causing issues
        batch_op.drop_column('notes')
        batch_op.drop_column('payment_date')
        batch_op.drop_column('paid_by')

    # ### end Alembic commands ###